#include<fstream>
#include<conio.h>
#include<stdio.h>
#include <stdlib.h>
#include<process.h>
#include<string.h>
#include <iostream>
using namespace std;
typedef struct lista{
	struct lista* head;
struct lista* next;
int value;
}lista
typedef struct lista2{
	struct lista2* hed;
struct lista2* net;
int vale;
}lista2;
typedef struct lista3{
	struct lista3* had;
struct lista3* nxt;
int vlue;
}lista3;
class voz
{
public:
        char zemlja_porekla[3];
        char boja[6];
        int id;
        bool operator == (voz &stanica.vrednost){
            return (vrednost == stanica.vrednost);
        }
        friend ostream& operator << (ostream& output, voz &primer){
            output << primer.vrednost;
        }
        friend istream& operator >> (istream& input, voz &primer){
            input >> primer.vrednost;
        }
        voz operator + (const voz& primer){
            voz novo;
            novo.vrednost = vrednost + primer.vrednost;
            return novo;
        }
        voz operator - (const voz& primer){
            voz novo;
            novo.vrednost = vrednost - primer.vrednost;
            return novo;
        }
protected:
private:
    int vrednost;
};
class motor: public voz
{
public:
    char poreklo_motora[3]
    int konja;
    int filter;
    int klip;
    int turbina;
    int blok;
    int zupcanik;
protected:
    motor();
    motor(char zemlja_porekla);
private:

};
class vagon: public voz
{
public:
    int sedista;
    int wc;
    int vrata;
    int biciklo;
protected:
    getsedista;
    voz();
private:

}
class stanica
{
public:
    int peron;
    int kolosek;
    int blagajna;
    int ulaza;
    int spratova;
    int pocetakradova;
    int krajradova;
protected:
    stanica();
private:

};
class karta
{
public:
    lista pocetak;
    lista2 odrediste;
    int vreme;
    voz id;
    int cena;

protected:
    karta();
private:

};
class blagajna : stanica
{
public:
    int otvorena;
    int pocetakrada;
    int krajrada;
    int red;
    int vremepauze;
protected:
    blagajna(blagajna& pocetakradova);
    blagajna(blagajna& kraj radova);
private:


};
class pn
{

public:

	int pnr;

}x;
void star();


class train
{

public:

	int tno, ac, sleeper, sc, time, dist, fac, fsleeper, fsc;
	lista from;
	lista2 to;
	lista3 name;
public:

	void modify();
	void del();
	void display();
	void acp();
	void check();
	void update(int);


	int gettno()
	{
		return tno;
	}

	char getf1()
	{
		return from;
	}

	char gett1()
	{
		return to;
	}


}t;
void add();
void disp();
class book
{

public:

	int no, tickets;
	pn pnr;
	char pto[100], pfrom[100], clas[20];
	long int amt;


	int getpnr()
	{
		return pnr;

	}

	int gettic()
	{
		return tickets;

	}

	int getamt()
	{
		return amt;

	}

	void get();
	int assign();
	void show();
	void cancel();


}b;
class passenger
{

public:

	pn pnr;
	int page;
	char psex, pname[100];



	void getp();
	void showp(int);


}p;
void admin();
int main()
{
	int n;

	while (1)
	{
		clrscr();
		star();

		gotoxy(30, 2); cout << "  WELCOME TO INDIAN RAILWAYS";
		gotoxy(5, 5); cout << "  ENTER 1 TO CHECK AVAILABILITY ";
		gotoxy(5, 6); cout << "  ENTER 2 TO BOOK TICKETS";
		gotoxy(5, 7); cout << "  ENTER 3 FOR CANCELLATION";
		gotoxy(5, 8); cout << "  ENTER 4 FOR ADMIN ACCESS";
		gotoxy(5, 9); cout << "  ENTER 5 TO EXIT";
		gotoxy(5, 14); cout << "  ENTER YOUR CHOICE	     -		";
		cin >> n;

		clrscr();

		switch (n)
		{

		case 1: t.check();
			getch();
			break;


		case 2: b.get();
			getch();
			break;


		case 3: b.cancel();
			getch();
			break;



		case 4: admin();
			break;



		case 5: exit(0);

		default: clrscr();
			star();
			gotoxy(10, 10); cout << "   WRONG CHOICE";
			getch();

		}

	}
	return 0;
}
void add()
{
	clrscr();
	star();
	fstream rr;
	rr.open("train.dat", ios::app | ios::in | ios::binary);

	char ch;

	do
	{

		clrscr();
		star();
		t.acp();
		rr.write((char*)&t, sizeof t);

		gotoxy(10, 15); cout << " ENTER MORE RECORDS  ?  (Y/N)   -     ";
		cin >> ch;

	} while (ch == 'y' || ch == 'Y');

	rr.close();

}
void disp()
{
	fstream rr;
	rr.open("train.dat", ios::in | ios::binary);

	while (rr.read((char*)&t, sizeof t))
	{
		clrscr();
		star();
		t.display();
	}

	rr.close();

}
void train::display()
{
	star();

	gotoxy(5, 3); cout << " TRAIN NUMBER				" << tno;
	gotoxy(5, 4); cout << " TRAIN NAME	      		        	" << name;
	gotoxy(5, 5); cout << " STARTING POINT				" << from;
	gotoxy(5, 6); cout << " DESTINATION     				" << to;
	gotoxy(5, 7); cout << " NUMBER OF AC TICKETS AVAILABLE		" << ac;
	gotoxy(5, 8); cout << " PRICE OF EACH AC TICKET	  	   Rs.	" << fac;
	gotoxy(5, 9); cout << " NUMBER OF SLEEPER TICKETS AVAILABLE         " << sleeper;
	gotoxy(5, 10); cout << " PRICE OF EACH SLEEPER CLASS TICKET	   Rs.	" << fsleeper;
	gotoxy(5, 11); cout << " NUMBER OF SECOND CLASS TICKETS AVAILABLE   " << sc;
	gotoxy(5, 12); cout << " PRICE OF EACH SECOND CLASS TICKET	   Rs.	" << fsc;
	gotoxy(5, 13); cout << " DURATION OF JOURNEY (hrs)			" << time;
	gotoxy(5, 14); cout << " TOTAL DISTANCE (km)	   		" << dist;
	getch();
}
void train::acp()
{

	clrscr();
	star();

	gotoxy(5, 3); cout << " ENTER TRAIN NUMBER						"; cin >> tno;
	gotoxy(5, 4); cout << " ENTER TRAIN NAME			"; gets(name);
	gotoxy(5, 5); cout << " ENTER STARTING POINT	      				"; gets(from);
	gotoxy(5, 6); cout << " ENTER DESTINATION               				"; gets(to);
	gotoxy(5, 7); cout << " ENTER NUMBER OF AC TICKETS TO BE MADE AVAILABLE		"; cin >> ac;
	gotoxy(5, 8); cout << " ENTER PRICE OF EACH AC TICKET		  	    Rs.	"; cin >> fac;
	gotoxy(5, 9); cout << " ENTER NUMBER OF SLEEPER TICKETS TO BE MADE AVAILABLE	"; cin >> sleeper;
	gotoxy(5, 10); cout << " ENTER PRICE OF EACH SLEEPER TICKET			    Rs.	"; cin >> fsleeper;
	gotoxy(5, 11); cout << " ENTER NUMBER OF SECOND CLASS TICKETS TO BE MADE AVAILABLE	"; cin >> sc;
	gotoxy(5, 12); cout << " ENTER PRICE OF EACH SECOND CLASS TICKET		    Rs. "; cin >> fsc;
	gotoxy(5, 13); cout << " ENTER DURATION OF JOURNEY (hrs)				"; cin >> time;
	gotoxy(5, 14); cout << " ENTER TOTAL DISTANCE  (km)					"; cin >> dist;

}
void train::modify()
{
	clrscr();
	star();

	fstream rr;
	rr.open("train.dat", ios::in | ios::out | ios::binary);
	int id, f = 0, n = 0, p;

	gotoxy(5, 3); cout << " ENTER TRAIN NUMBER OF TRAIN TO BE MODIFIED	   -	";
	cin >> id;

	while (rr.read((char*)&t, sizeof t))
	{
		n++;

		if (id == t.ret())
		{
			acp();
			p = (n - 1) * (sizeof t);
			rr.seekp(p, ios::beg);
			rr.write((char*)&t, sizeof t);
			f = 1;
		}

	}

	if (f == 0)
	{
		gotoxy(10, 6); cout << " SORRY RECORD NOT FOUND !!";
	}

	rr.close();

}
void train::del()
{
	clrscr();
	star();

	int id, f = 0;

	fstream rr;
	rr.open("train.dat", ios::in | ios::binary);

	fstream t1;
	t1.open("temp.dat", ios::out | ios::binary);

	gotoxy(5, 2); cout << " ENTER TRAIN NUMBER OF TRAIN TO BE DELETED	    -	";
	cin >> id;

	while (rr.read((char*)&t, sizeof t))
	{

		if (id == t.ret())
		{
			char ch;
			f = 1;
			t.display();

			gotoxy(5, 17); cout << " ARE YOU SURE  ?  (Y/N)     -             ";
			cin >> ch;

			if (ch == 'y' || ch == 'Y')
			{
				gotoxy(10, 19); cout << " RECORD DELETED";
			}

			else
			{
				t1.write((char*)&t, sizeof t);
			}

		}

		else
			t1.write((char*)&t, sizeof t);

	}

	if (f == 0)
	{
		gotoxy(10, 10); cout << " SORRY TRAIN NOT FOUND!!";
	}

	rr.close();
	t1.close();

	remove("train.dat");
	rename("temp.dat", "train.dat");


}
void train::check()
{
	star();

	char T[100], f[100];

	int flag = 0;

	gotoxy(10, 5); cout << " ENTER THE STARTING POINT 	  -	";
	gets(f);

	gotoxy(10, 8); cout << " ENTER THE DESTINATION 	  -	";
	gets(T);

	fstream rr;
	rr.open("train.dat", ios::in | ios::binary);


	while (rr.read((char*)&t, sizeof t))
	{

		if (strcmpi(f, t.f1()) == 0 && strcmpi(T, t.t1()) == 0)
		{

			clrscr();
			star();
			flag = 1;
			t.display();
		}

	}

	if (flag == 0)
	{
		gotoxy(10, 14); cout << " SORRY NO AVAILABLE TRAINS FOUND  ";
	}


}
void train::update(int q)
{

	fstream rr;
	int n, tic;

	rr.open("booking.dat", ios::in | ios::out | ios::binary);

	while (rr.read((char*)&b, sizeof b))
	{

		if (b.pnr == q)
		{

			n = b.no;
			tic = b.tickets;

			rr.close();

			rr.open("train.dat", ios::in | ios::out | ios::binary);
			rr.seekg(0, ios::beg);

			int f = 0, p;

			while (rr.read((char*)&t, sizeof t))
			{

				f++;

				if (t.tno == n)
				{
					p = (f - 1) * (sizeof(t));
					rr.seekp(p, ios::beg);


					if (strcmpi(b.clas, "ac") == 0)
					{

						t.ac += tic;
						rr.write((char*)&t, sizeof t);
					}


					else if (strcmpi(b.clas, "sleeper") == 0)
					{
						t.sleeper += tic;
						rr.write((char*)&t, sizeof t);
					}


					else
					{
						t.sc += tic;
						rr.write((char*)&t, sizeof t);
					}


				}

			}

			rr.close();


			break;
		}

	}


}
void book::get()

{
	int n = 1;

	while (n == 1)
	{
		clrscr();
		star();

		gotoxy(33, 3); cout << " WELCOME TO BOOKING MENU";
		gotoxy(5, 6); cout << " ENTER 1 TO BOOK TICKETS";
		gotoxy(5, 8); cout << " ENTER 2 TO GO BACK";
		gotoxy(5, 14); cout << " ENTER YOUR CHOICE		-      ";
		cin >> n;

		if (n == 1)

		{

			clrscr();
			star();

			int flag = 0;

			gotoxy(10, 3); cout << " ENTER THE BOARDING POINT 	   -	";
			gets(pfrom);

			gotoxy(10, 6); cout << " ENTER THE DESTINATION 	   -	";
			gets(pto);


			fstream rr;
			rr.open("train.dat", ios::in | ios::binary);


			fstream pas;
			pas.open("passenger.dat", ios::app | ios::binary);


			rr.seekg(0, ios::beg);

			while (rr.read((char*)&t, sizeof t))
			{

				if (strcmpi(pfrom, t.f1()) == 0 && strcmpi(pto, t.t1()) == 0)
				{
					clrscr();
					star();
					flag = 1;
					t.display();
				}

			}
			rr.close();

			if (flag == 0)
			{
				gotoxy(10, 14); cout << " SORRY NO AVAILABLE TRAINS FOUND  ";
				getch();
			}
			if (flag == 1)
			{

				int f1 = 0;

				clrscr();
				star();

				gotoxy(5, 5); cout << " ENTER THE TRAIN NUMBER OF WHICH YOU WANT TO BOOK TICKETS	  -     "; cin >> no;

				rr.open("train.dat", ios::in | ios::binary);
				rr.seekg(0, ios::beg);

				while (rr.read((char*)&t, sizeof t))
				{

					if (no == t.ret())
					{

						f1 = 1;

						gotoxy(5, 6); cout << " ENTER THE NUMBER OF TICKETS YOU WANT TO BOOK (MAX. 6)        -     ";
						cin >> tickets;

						if (tickets > 6)
						{
							gotoxy(5, 10); cout << " SORRY CANNOT BOOK MORE THAN 6 TICKETS";
							getch();
							break;
						}

						gotoxy(5, 7); cout << " ENTER THE CLASS   ( AC / SLEEPER / SECOND CLASS (SC) )  	  -	";
						gets(clas);

						if (strcmpi(clas, "ac") != 0 && strcmpi(clas, "sleeper") != 0 && strcmpi(clas, "sc") != 0)
						{
							gotoxy(5, 10); cout << " SORRY YOU HAVE ENTERED INCORRECT CLASS";
							getch();
							break;
						}

						int z, q;


						z = b.assign();

						if (z == 0)
						{
							gotoxy(5, 9); cout << " SORRY CANNOT BOOK " << tickets << " TICKETS";
							getch();
							break;
						}


						else
						{

							int s;


							for (int i = 1; i <= tickets; i++)
							{
								clrscr();
								star();

								gotoxy(5, 2); cout << " ENTER DETAILS OF PASSENGER    " << i;
								p.getp();
								p.pnr = b.pnr;

								pas.write((char*)&p, sizeof p);
							}

							pas.close();

							b.show();
							p.showp(b.pnr);
							getch();


						}

					}


				}

				if (f1 == 0)
				{
					gotoxy(10, 10); cout << " SORRY YOU HAVE ENTERED INCORRECT TRAIN NUMBER  ";
					getch();
				}

			}


			pas.close();
			rr.close();

		}

	}


}
int book::assign()
{


	int n = 0, p;


	fstream rr;
	rr.open("train.dat", ios::in | ios::out | ios::binary);


	rr.seekg(0, ios::beg);

	while (rr.read((char*)&t, sizeof t))
	{
		n++;

		if (no == t.ret())
		{


			if (strcmpi(clas, "ac") == 0)
			{
				amt = tickets * t.fac;

				p = (n - 1) * sizeof(t);
				rr.seekp(p, ios::beg);

				t.ac = t.ac - tickets;

				if (t.ac < 0)
				{
					return 0;
				}

				else
					rr.write((char*)&t, sizeof t);
			}

			else if (strcmpi(clas, "sleeper") == 0)
			{
				amt = tickets * t.fsleeper;

				p = (n - 1) * sizeof(t);
				rr.seekp(p, ios::beg);

				t.sleeper = t.sleeper - tickets;

				if (t.sleeper < 0)
					return 0;

				else
					rr.write((char*)&t, sizeof t);

			}


			else
			{
				amt = tickets * t.fsc;

				p = (n - 1) * sizeof(t);
				rr.seekp(p, ios::beg);

				t.sc = t.sc - tickets;

				if (t.sc < 0)
					return 0;

				else
					rr.write((char*)&t, sizeof t);

			}

			break;
		}


	}

	fstream b1;
	b1.open("booking.dat", ios::app | ios::binary);

	fstream rr2;
	rr2.open("pnr.dat", ios::in | ios::binary);

	if (!rr2)
	{
		rr2.close();

		rr2.open("pnr.dat", ios::in | ios::app | ios::binary);
		rr2.seekp(0, ios::beg);

		x.pnr = 1000;

		rr2.write((char*)&x, sizeof x);
		rr2.close();
	}

	else
	{
		int d;

		rr2.seekg(0, ios::beg);

		while (rr2.read((char*)&x, sizeof x))
		{

			d = x.pnr;
		}

		rr2.close();
		fstream r2;
		r2.open("pnr.dat", ios::app | ios::binary);

		x.pnr = ++d;

		r2.write((char*)&x, sizeof x);
		r2.close();
	}

	b.pnr = x.pnr;

	b1.write((char*)&b, sizeof b);
	b1.close();



	return 1;

} //END OF FUNCTION
void book::show()
{

	clrscr();

	star();

	gotoxy(33, 2); cout << " TICKET";
	gotoxy(5, 4); cout << " PNR NUMBER	        -	" << pnr;
	gotoxy(5, 5); cout << " TRAIN NUMBER       -       " << no;
	gotoxy(5, 6); cout << " TOTAL PASSENGERS   -	" << tickets;
	gotoxy(5, 7); cout << " TOTAL AMOUNT       -	" << amt;
	gotoxy(5, 8); cout << " BOARDING POINT     -       " << pfrom;
	gotoxy(5, 9); cout << " DESTINATION	-	" << pto;
	gotoxy(8, 23); cout << " YOUR TICKET HAS BEEN RESERVED";
}
void book::cancel()
{
	star();

	train tr;

	fstream  b1;
	b1.open("booking.dat", ios::in | ios::binary);

	fstream rr;
	rr.open("passenger.dat", ios::in | ios::binary);

	fstream t;
	t.open("temp", ios::out | ios::binary);

	fstream tmp;
	tmp.open("t2", ios::out | ios::binary);


	int id;
	int flag = 0, f = 0;
	char ch;

	gotoxy(5, 5); cout << " ENTER YOUR PNR NUMBER    -  	";
	cin >> id;



	while (b1.read((char*)&b, sizeof b))
	{

		if (id == b.retpnr())
		{
			clrscr();
			star();

			flag = 1;
			gotoxy(5, 4); cout << " PNR NUMBER	        -	" << pnr;
			gotoxy(5, 5); cout << " TRAIN NUMBER       -       " << no;
			gotoxy(5, 6); cout << " TOTAL PASSENGERS   -	" << tickets;
			gotoxy(5, 7); cout << " TOTAL AMOUNT       -	" << amt;
			gotoxy(5, 8); cout << " BOARDING POINT     -       " << pfrom;
			gotoxy(5, 9); cout << " DESTINATION	-	" << pto;

			f = 1;
			p.showp(id);

			gotoxy(5, 22); cout << " ARE YOU SURE  ?  (Y/N)   - 	";
			cin >> ch;


			if (ch == 'y' || ch == 'Y')
			{
				gotoxy(5, 23); cout << " YOUR BOOKING HAS BEEN CANCELLED	";
				tr.update(id);
			}

			else
			{
				flag = 0;
				t.write((char*)&b, sizeof b);
			}



		}


		else
		{
			t.write((char*)&b, sizeof b);
		}


	}

	remove("booking.dat");
	rename("temp", "booking.dat");



	if (flag == 1)

	{

		rr.seekg(0, ios::beg);

		while (rr.read((char*)&p, sizeof p))
		{


			if (id != b.retpnr())
				tmp.write((char*)&p, sizeof p);


		}


	}




	if (f == 0)
	{
		gotoxy(5, 8); cout << " SORRY INVALID PNR	";
	}



	rr.close();
	tmp.close();

	b1.close();
	t.close();

	remove("passenger.dat");
	rename("t2", "passenger.dat");

}
void passenger::getp()
{
	star();


	gotoxy(5, 3); cout << " ENTER NAME	     -	"; gets(pname);
	gotoxy(5, 4); cout << " ENTER AGE	     -	"; cin >> page;
	gotoxy(5, 5); cout << " ENTER SEX (M/F)  -	"; cin >> psex;



}
void passenger::showp(int q)
{

	int i = 14;

	fstream rr;
	rr.open("passenger.dat", ios::in | ios::binary);

	gotoxy(30, 12); cout << " PASSENGER LIST";

	gotoxy(5, 13); cout << " PASSENGER NAME   -   PASSENGER AGE   -   PASSENGER SEX  ";

	while (rr.read((char*)&p, sizeof p))
	{


		if (p.pnr == q)
		{
			gotoxy(6, ++i); cout << pname;
			gotoxy(30, i); cout << page;
			gotoxy(50, i); cout << psex;
		}

	}

	rr.close();



}
void admin()
{
	star();

	int m;
	char p[20];

	gotoxy(10, 5); cout << " ENTER THE PASSWORD     -   	";

	for (int i = 0; i < 20; i++)
	{
		p[i] = getch();

		if (p[i] == 13)
		{
			p[i] = '\0';
			break;
		}

		else
			cout << "*";
	}



	if (strcmp(p, "railway123") == 0)
	{

		do
		{
			clrscr();
			star();

			gotoxy(33, 3); cout << " ADMIN SECTION";
			gotoxy(5, 5); cout << " ENTER 1 TO CREATE NEW FILE";
			gotoxy(5, 6); cout << " ENTER 2 TO ENTER NEW RECORD ";
			gotoxy(5, 7); cout << " ENTER 3 TO MODIFY A TRAIN RECORD";
			gotoxy(5, 8); cout << " ENTER 4 TO DELETE A TRAIN RECORD";
			gotoxy(5, 9); cout << " ENTER 5 TO DISPLAY ALL THE CURRENT RECORDS";
			gotoxy(5, 10); cout << " ENTER 6 TO GO BACK";
			gotoxy(5, 15); cout << " ENTER YOUR CHOICE	    	  -        ";
			cin >> m;

			switch (m)
			{
			case 1: remove("train.dat");
				add();
				getch();
				break;


			case 2: add();
				getch();
				break;

			case 3: t.modify();
				getch();
				break;

			case 4: t.del();
				getch();
				break;

			case 5: disp();
				getch();
				break;

			}

		} while (m >= 1 && m <= 5);


	}


	else
	{
		clrscr();
		star();
		gotoxy(10, 7); cout << " WRONG PASSWORD";
		gotoxy(10, 10); cout << " ACCESS DENIED";
		getch();
	}

}
void star()
{

	for (int i = 1; i < 81; i++)
	{
		gotoxy(i, 1); cout << "*";
		gotoxy(i, 24); cout << "*";
	}

	for (i = 1; i < 25; i++)
	{
		gotoxy(1, i); cout << "*";
		gotoxy(80, i); cout << "*";
	}

}
